script Stage {
    callback shouldSpawn {
        EntityInfo(entityIndex = 0).despawned()
    }

    var lastTime = time

    var startIndex = 0
    var endIndex = baseLength - 1
    var size = baseLength

    enum Direction {
        RIGHT = 0,
        UP,
        LEFT,
        DOWN,
    }

    var direction: Direction

    func checkEdgeCollide(): Boolean {
        var headCoordinate = *coordinates[endIndex]
        var ok = true
        if (
            (direction matches Direction.RIGHT && (headCoordinate % boardSize) == boardSize - 1) ||
            (direction matches Direction.LEFT && (headCoordinate % boardSize) == 0) ||
            (direction matches Direction.UP && floor(headCoordinate / boardSize) == boardSize - 1) ||
            (direction matches Direction.DOWN && floor(headCoordinate / boardSize) == 0)
        ) {
            fail()
            ok = false
        }
        ok
    }

    func move(): Boolean {
        lastDirection = direction
        var headCoordinate = *coordinates[endIndex]
        *states[headCoordinate] = PanelState.BODY
        endIndex += 1
        endIndex %= panelCount
        when (direction) {
            is Direction.RIGHT -> *coordinates[endIndex] = headCoordinate + 1
            is Direction.LEFT -> *coordinates[endIndex] = headCoordinate - 1
            is Direction.UP -> *coordinates[endIndex] = headCoordinate + boardSize
            is Direction.DOWN -> *coordinates[endIndex] = headCoordinate - boardSize
        }
        var targetState = *states[*coordinates[endIndex]]
        when (targetState) {
            is PanelState.EMPTY -> {
                *states[*coordinates[endIndex]] = PanelState.HEAD
                moveTail()
            }
            is PanelState.BODY -> live = false
            is PanelState.APPLE -> {
                score++
                size++
                *states[*coordinates[endIndex]] = PanelState.HEAD
                spawnApple()
            }
            is PanelState.HEAD -> { /* unreachable */ }
        }
        true
    }

    func moveTail() {
        *states[*coordinates[startIndex]] = PanelState.EMPTY
        startIndex += 1
        startIndex %= panelCount
    }

    func spawnApple() {
        var target = randomInteger(0, panelCount - size)
        var num = -1
        var index = -1
        while (num != target) {
            index++
            if (*states[index] matches PanelState.EMPTY) {
                num++
            }
        }
        *states[index] = PanelState.APPLE
    }

    func fail() {
        live = false
    }

    func updateDirection() {
        if (touchVR >= vrThreshold) {
            var newDirection = Direction.LEFT
            when {
                touchVW >= PI * 3/4 -> newDirection = Direction.LEFT
                touchVW >= PI * 1/4 -> newDirection = Direction.UP
                touchVW >= PI * -1/4 -> newDirection = Direction.RIGHT
                touchVW >= PI * -3/4 -> newDirection = Direction.DOWN
                else -> newDirection = Direction.LEFT
            }
            if ((lastDirection.ordinal - newDirection.ordinal) % 2 != 0) {
                direction = newDirection
            }
        }
    }

    var initializing = true
    var lastDirection = Direction.RIGHT

    callback updateSequential {
        if (initializing) {
            spawnApple()
            initializing = false
        }
        if (time - lastTime >= interval && live && size < panelCount) {
            lastTime = time
            checkEdgeCollide() && move()
        }
    }

    callback touch {
        updateDirection()
    }
}

archetype Stage -> Stage()

level var live: Boolean
level var score: Number

enum PanelState {
    EMPTY = 0,
    BODY,
    HEAD,
    APPLE
}

let baseLength = 5

let boardSize = 15
let boardWidth = 1.8
let panelSize = boardWidth / boardSize

let panelCount = boardSize ^ 2
let coordinates = Pointer[List[Number][panelCount]](ENTITY_SHARED_MEMORY_ARRAY, 0)
let states = Pointer[List[PanelState][panelCount]](ENTITY_SHARED_MEMORY_ARRAY, boardSize^2)

let interval = 0.75 / options.`#NOTE_SPEED`

let vrThreshold = 1.5
